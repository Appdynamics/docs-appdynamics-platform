---
title: Installing and Configuring AppDynamics Platform Monitoring for PCF
owner: Partners
---

This topic describes how to install and configure AppDynamics Platform Monitoring for Pivotal Cloud Foundry (PCF).
The tile allows you to deploy  AppDynamics Firehose Nozzle that collects various KPI metrics and a Dashboard that
automatically creates health rules and custom dashboards associated with the metrics.

Additionally the tile allows for advanced configuration to customize metric collection, configuring
multi-foundation dashboard and overiding default configurations.

<p class="note warning"><strong>WARNING:</strong> Starting with 4.6 version the default AppDynamics Nozzle Application Name
has been changed to **appd-nozzle-v2** and a new dashboard with name **appd-nozzle-v2-<cf system domain>-PCF KPI Dashboard**
will be created.
</p>

## <a id='overview-appd-nozzle'></a> Overview

AppDynamics Nozzle aggregates and forwards metrics from the **Loggregator [Firehose](https://docs.cloudfoundry.org/loggregator/architecture.html#firehose)**
to the AppDynamics Controller. The Controller processes the combined data stream of  detailed performance metrics on the health of the underlying
infrastructure of apps running on PCF.

When you successfully configure AppDynamics Nozzle on PCF, a default application nozzle, named `appd-nozzle-v2`, is created on the AppDynamics Controller.
The `appd-nozzle-v2` monitors the Loggregator Firehose for specified events and metrics, and streams this data to a default nozzle tier named `appd-nozzle-tier`,
and a default nozzle node named `appd-nozzle-node`.

You can view these correlated logs and metrics in the Metric Browser corresponding to the Nozzle application instance or resource being monitored.

## <a id='before-you-start'></a> Before You Start

1. Create a [Pivotal Network](https://network.pivotal.io) account if you do not have one.

1. [Set up the AppDynamics Controller](https://docs.appdynamics.com/display/PRO45/Controller+Deployment).

1. Acquire at least one AppDynamics Go SDK Agent License.
   For more information, see [License Management](https://docs.appdynamics.com/display/PRO45/License+Management),
   and [License Entitlements and Restrictions](https://docs.appdynamics.com/display/PRO45/License+Entitlements+and+Restrictions).


## <a id='set-up-appd-nozzle'></a> Configuring the AppDynamics Nozzle for PCF

1. Log in to the Ops Manager.

1. If the AppDynamics Platform Monitoring tile does not appear in the Ops Manager Installation Dashboard,
   click **Import a Product** in the left-side menu to import the AppDynamics Platform Monitoring tile.

1. Double-click the **AppDynamics Platform Monitoring for PCF** tile in the Installation Dashboard.
   A Settings tab is displayed.

1. Fill in the details for the following forms on the tile.

### <a id='nozzle configuration'></a> AppDynamics Nozzle Configuration

This form takes in information to establish a connection with Cloud Foundry Loggregator and AppDynamics Controller.

![Settings tab for AppDynamics Nozzle Configuration](./images/nozzle_config.png)

* **Doppler Logging Endpoint**: The Firehose endpoint address, `doppler_logging_endpoint` value.
    * Run the `cf curl /v2/info` command to obtain the values of The UAA `token_endpoint`
      and Doppler Logging Endpoint `doppler_logging_endpoint` URL respectively.

    <pre class='terminal'>
    $ cf curl /v2/info
    {
    ...
    "doppler_logging_endpoint": "wss://doppler.sys.pie-multi-az-blue.cfplatformeng.com:443",
    }
    </pre>

* **Nozzle Username**: The username for a member account belonging to the **doppler.firehose** group. This is the authorized UAA user that AppDynamics Nozzle uses to access the Loggregator.
* **Nozzle Password**: The password for the above member account.
* **Controller Account Name**: The name of the account in the AppDynamics Controller.
    Access the account name in the AppDynamics Controller UI on the Account tab under License.
* **Account Access Key**: The access key for the AppDynamics Controller account.
    Access the account key in the AppDynamics Controller UI on the Account tab under License.
* **Controller Host**: The hostname of the AppDynamics Controller.
* **Controller Port**: The port on which the AppDynamics Controller listens for Nozzle traffic.
* **Enable Controller SSL**: Establishes secures communication with the Controller.
* **AppDynamics Controller Proxy**: Proxy url, if necessary, used by the Nozzle and Dashboard App to communicate with the AppDynamics Controller. Example: `https://user:password@proxy.com:9000`

### <a id='Nozzle Credentials'></a> Nozzle Credentials
* Cloud Foundry (CF) environments usually ship with an **opentsdb-firehose-nozzle** account which already belongs to the doppler.firehose group.
      To use the existing opentsdb-firehose-nozzle account shipped with CF, log in to the OPS Manager and select the PAS tile and navigate to credentials > UAA > **Opentsdb Nozzle Credentials**
      and copy the username and password.
* (or) Create a new account in the doppler.firehose group with the correct permissions.
      For more information, see [UAA Client](https://github.com/cf-platform-eng/firehose-nozzle#option-2-uaa-client).

### <a id='dashboard configuration'></a> AppDynamics Dashboard Configuration

This form takes in information to create a Dashboard and associated health rules on the AppDynamics Controller

![Settings tab for AppDynamics Dashboard Configuration](./images/dashboard_config.png)

* **Username for Reporting Custom Dashboard**: Username of an account with custom dashboard creation permissions.
* **Password**: Password for the Controller account.

Refer this section for setting up a [controller account with required permissions](kpi_dashboard.html#dashboard-app)

#### <a id='configuration'></a> Multi-foundation Dashboard Configuration (Optional)

The Multi-foundation Dashboard configuration supports creating a single dashboard that
displays the health and performance of multiple foundations. Each foundation that is included
must have the platform tile installed and configure the Nozzle to report to the same controller.

One Multi-foundation Dashboard is created for each configuration added in the Multi-
foundation Dashboard Configurations section. In the example below, ‘all-foundations’ is the
name of the new configuration, and will be prepended to the name of the dashboard created in
the controller, which uses the format &lt;config name&gt;-PCF Multi-foundation Dashboard.

![](./images/08multidashboardconfig.png)

The ‘Application regex’ and ‘Tier regex’ should match one or more app/tier combinations where
AppDynamics Nozzles are reporting. Based on the default app and tier, the example uses ‘appd-
nozzle-v2’ as the app regex, and sys.* as the tier regex, which will match any system domain.

The ‘Dashboard layout selection’ defaults to ‘Auto select layout’ where the Dashboard App will
select a layout with the appropriate number of foundations per row based on the total number
of foundations discovered. Or a specific layout can be chosen to control the density of the
created dashboard.

Below are examples of the ‘Two foundations per row’ and ‘Four foundations per row’ layouts.

![Four foundations per row layout](./images/09fourfoundation.png)

![Two foundations per row layout](./images/10twofoundation.png)

### <a id='Advanced metrics collection'></a> (Optional) Extending Metrics Collection

Starting with the 4.6.* version of the tile we have included a feature to collect additional metrics in addition to
the default standard KPI metrics that are collected by AppDynamics Nozzle.

![Settings tab for AppDynamics Advanced Metrics](./images/advanced_metrics.png)

* **Collect Container Metrics**: Check this box to collect Container metrics for the applications.

* **Extended Metrics JSON Filter**: AppDynamics Nozzle aplies a filter to limit the number of metrics that are processed. This JSON configures
the filter. It is a simple JSON dictionary with metrics `origin` tag used as keys and the list of `names` of metrics that belong to the `origin` that are to be collected as value.
Additionally, a wildcard `"*"` can also be used inside the list to collect all metrics under the `origin`.

```json
{
    "<origin>":["<MetricName1>", "<MetricName2>"],
    "<origin>":["*"]
}
```

e.g: Consider this metric with `origin` set to `uaa` with `name` `audit_service.principal_not_found_count`

```bash
origin:"uaa" eventType:ValueMetric timestamp:1553201379027067175 deployment:"cf" job:"uaa" index:"1e586719-7e22-4cb4-944d-2176db9e01b8"
 ip:"192.168.16.21" tags:<key:"source_id" value:"uaa" >
 valueMetric:<name:"audit_service.principal_not_found_count" value:0 unit:"gauge" >
```
to report the metric the filter entry will be

```json
{
    "uaa": ["audit_service.principal_not_found_count"]
}
```

### <a id='Overriding Defaults'></a> (Optional) Overriding Defaults

<p class="note"> For 4.4.x controllers it is mandatory to override the default Application, Tier, Tier ID and Node values.

![Settings tab for AppDynamics Default Overrides](./images/default_config.png)

* **UAA Token Endpoint**: UAA token end point of the cloudfoundry. This can be found by doing `$ cf curl /v2/info | grep token_endpoint`
* **Nozzle Application Name**: Enter a name to identify the Nozzle Application on the Controller, such as **_test-app-nozzle_**.
* **Nozzle Tier Name**: Enter a name for the Nozzle Tier that corresponds to the Nozzle Application Name, such as **_test-app-tier_**. This MUST be a Go SDK Tier.
* **Nozzle Node Name**: Enter a name for the Nozzle Node that corresponds to the Nozzle Application Name, such as **_test-app-node_**.
* **Nozzle Tier ID**: Enter the component ID of the GoLang SDK tier.

#### <a id='44x Controllers'></a> 4.4.x Controllers
For 4.4.x controller, please create an applicaiton on the AppDynamics Controller and create a `Go SDK` tier associated with that application and record the tier-id.
Enter the AppDynamics AppName, Tier, TierID and Node names in the corresponding fields of the **Overriding Defaults** form.


## <a id='Scaling'></a> AppDynamics Nozzle Scalability

Starting with the 4.6.* version of the tile, AppDynamics Nozzle is completely scalable to any number of desired instances. However,
it is recommended to scale the number of nozzle instances to match the number of traffic controller instances.
See the [official cloud foundry recommendation](https://docs.cloudfoundry.org/loggregator/log-ops-guide.html#scaling-nozzles).


## <a id='deploy-multiple-tiles-on-multiple-instances'></a> Multiple PCF Foundations

Multiple AppDynamics Platform Monitoring tiles can be deployed on multiple PCF foundations, using a single AppDynamics Controller.
The metrics corresponding to each of the foundations are recorded under tier names which defaults to the system domain’s value of the Cloud Foundry deployment, for example: `sys.pie-multi-az-blue.cfplatformeng.com`
Optionally, the tier names can be customized by setting `Nozzle Tier Name` field in the **Overriding Defaults** form.
