---
title: AppDynamics PCF KPI Dashboard
owner: Partners
---

## <a id='use-case'></a> Use Case

Pivotal Cloud Foundry (PCF) is a multi-cloud Platform as a Service (PaaS). It provides continuous delivery and supports the full application development lifecycle, from initial development through all testing stages to deployment. Cloud Foundryâ€™s container-based architecture runs apps in any programming language over a variety of cloud service providers.

The AppDynamics Platform Monitoring for PCF provides platform metrics generated by the Loggregator Firehose about the usage of its features and corresponding resources using a Nozzle.


## <a id='use-case'></a> Overview and Use Case

The PCF KPI Dashboard visualizes performance of the PCF platform on which the AppDynamics tile is running. You can use this dashboard to view the following PCF performance metrics in a single pane of glass.

### <a id='metrics'></a> Metrics

- [Key Performance Indicators (KPIs)](https://docs.pivotal.io/pivotalcf/2-0/monitoring/kpi.html) for monitoring Pivotal Cloud Foundry:
     - [Diego Auctioneer Metrics](https://docs.pivotal.io/pivotalcf/2-0/monitoring/kpi.html#auctioneer)
     - [Diego BBS Metrics](https://docs.pivotal.io/pivotalcf/2-0/monitoring/kpi.html#bbs)
     - [Diego Cell Metrics](https://docs.pivotal.io/pivotalcf/2-0/monitoring/kpi.html#cell)
     - [Diego Locket Metrics](https://docs.pivotal.io/pivotalcf/2-0/monitoring/kpi.html#locket)
     - [Diego Route Emitter Metrics](https://docs.pivotal.io/pivotalcf/2-0/monitoring/kpi.html#route_emitter)
     - [PAS MySQL KPIs](https://docs.pivotal.io/pivotalcf/2-0/monitoring/kpi.html#kpi4MySQL)
     - [Gorouter Metrics](https://docs.pivotal.io/pivotalcf/2-0/monitoring/kpi.html#gorouter)
     - [UAA Metrics](https://docs.pivotal.io/pivotalcf/2-0/monitoring/kpi.html#uaa)
     - [Firehose Metrics](https://docs.pivotal.io/pivotalcf/2-0/monitoring/kpi.html#doppler-server)
     - [System (BOSH) Metrics](https://docs.pivotal.io/pivotalcf/2-0/monitoring/kpi.html#bosh)

- [Key Capacity Scaling Indicators](https://docs.pivotal.io/pivotalcf/2-1/monitoring/key-cap-scaling.html):
     - [Diego Cell Capacity Scaling Indicators](https://docs.pivotal.io/pivotalcf/2-1/monitoring/key-cap-scaling.html#cell)
     - [Firehose Performance Scaling Indicators](https://docs.pivotal.io/pivotalcf/2-1/monitoring/key-cap-scaling.html#doppler-server)
     - [CF Syslog Drain Performance Scaling Indicators](https://docs.pivotal.io/pivotalcf/2-1/monitoring/key-cap-scaling.html#scalable-syslog)
     - [Router Performance Scaling Indicators](https://docs.pivotal.io/pivotalcf/2-1/monitoring/key-cap-scaling.html#Router)
     - [UAA Performance Scaling Indicators](https://docs.pivotal.io/pivotalcf/2-1/monitoring/key-cap-scaling.html#UAA)

The PCF Firehose Dashboard uses a set of custom health rules and key performance metrics to visualize performance of the PCF platform. The health rules and dashboard are deployed in the AppDynamics Controller and app specified when the tile was set up.

###  <a id='dashboard'></a> Dashboard

The dashboard is separated into three sections:

- **(_top_)**: Core capacity measurements and alerts for the Diego Cell, Router, and UAA services
- **(_middle_)**: Performance alerts and a graph of Router throughput
- **(_bottom_)**: VM resource and health alerts for the core PCF services.

![](./images/pcf-kpi-dashboard-v2.png)
The PCF Firehose Dashboard uses a set of custom Health Rules and key performance metrics to visualize performance of the PCF platform. The Health Rules and Dashboard are deployed in the AppDynamics Controller and application specified when the tile was set up.


## <a id='important-notes'></a> Important Notes

- To view the Dashboard, you must be logged in as a AppDynamics user with permissions to view custom metric dashboards.

- The Dashboard has the name: <_app name_>-<_tier name_>-PCF KPI Dashboard

- The Health Rule names start with <_tier_name_> and are created in the <_app_name_> specified when the tile was set up.

- The Dashboard and Health Rules have default settings based on thresholds suggested by Pivotal. You might want to adjust these thresholds based on your specific deployment. For more information, see [Key Performance Indicators](https://docs.pivotal.io/pivotalcf/1-12/monitoring/kpi.html).

## <a id='pcf-dashboard-generator'></a> Usage

The PCF Dashboard Generator is a Python 3 app that generates a platform dashboard and set of health rules for PCF foundations that have installed the AppDynamics Tile v4.4.x. This tile pulls core PCF performance and scaling metrics from the PCF Loggregator Firehose and publishes them to the AppDynamics Controller.

You can run the PCF Dashboard Generator as a command line script or as an app with a REST API. The AppDynamics Tile installs the Generator as a PCF app that automatically generates the required dashboards and health rules when the app starts up.

### <a id='naming'></a> Dashboard and Health Rules Naming

The generated dashboard is named according to the app and tier name configured in the AppDynamics tile, i.e. APPNAME-TIERNAME-PCF KPI Dashboard. The generated health rules are prefixed with the tier name configured in the tile, so that AppDynamics tiles deployed to multiple foundations can report to the same AppDynamics app. An example is TIERNAME-Diego Cell Memory Capacity.

### <a id='diego-health-rules'></a> Updating Diego Cell Capacity Health Rules

The generated health rules will reflect the current number of diego cells when the tile is deployed. If you scale the number of diego cells after that point, the following health rules related to diego cell capacity will need to be regenerated, as they rely on metric expressions that include variables for each diego cell:

- ${tierName}-Diego Cell Container Capacity
- ${tierName}-Diego Cell Memory Capacity
- ${tierName}-Diego Cell Disk Capacity
- ${tierName}-Remaining Memory Available-Cell Memory Chunks Available
- ${tierName}-Remaining Memory Available-Overall Remaining Memory Available
- ${tierName}-Remaining Disk Available

Assuming a PCF environment, the easiest way to regenerate these health rules is to delete them in the controller UI, as well as the KPI dashboard that references them `${applicationName}-${tierName}-PCF KPI Dashboard`. The PCF Dashboard Generator will automatically recreate both the health rules and dashboard based on the latest diego cell count within 10 minutes. Note that if you've made any changes to these health rules, you'll need to reapply them.

### <a id='overwrite-behavior'></a> Overwrite Behavior

The PCF Dashboard Generator will write the dashboard and health rules to the controller and application configured in the AppDynamics tile only if they do not exist. If you wish to recreate the dashboard and overwrite the existing health rules you can either rename or delete the existing dashboard and health rules, or supply the appropriate overwrite/recreate flag.

### <a id='rest-endpoint'></a> Using REST Endpoint to Regenerate Dashboard and Health Rules

When the PCF Dashboard Generator is deployed in PCF, or run from the commandline with the `--start_service` option, it will expose a publish endpoint that accepts POST requests. In PCF, the URL would be http(s)://pcf-route/pcf-dash/publish?overwrite_hrs=false&recreate_dashboard=false .

The `overwrite_hrs` and `recreate_dashboard` parameters can be set to `true` to overwrite existing health rules (back up existing health rules if necessary) or recreate the dashboard (a pre-existing dashboard is not deleted).

<!--
[//]: # TBD -- Need more info or links re last point....
-->
